'''
Created on Nov 6, 2013

@author: florin
'''
import unittest
import org.umd.assemblytest.readcoverage.samfile as sam

class SamfileTest(unittest.TestCase):


    def setUp(self):
        pass


    def tearDown(self):
        pass


    def test_alignment_parse(self):
        alignment = sam.Alignment.parse('gnl|ti|1086975905\t16\t8\t1626\t0\t8M1I3M1I6M2I2M1I1M1I5M1D2M3I7M5I4M1D4M9I6M5I3M5I1M4I499M2I2M2I3M4I1M2I7M\t*\t0\t0\tTTGACCTCTTGTGTGGTCAGGTTGTCCTTGTTTGGCATGGTCACGTTCAAAGCTGGGTATTAGAATTTTAAATGGGTCCCTCAGTAAACAGCTATGACCTCCTCGTCGAGAGTGTAGTCTGCCTTTGTGGCCATTTCCTCCCCAGTGAATGAGAAAATGTGAATGTGTGTGTTCTCAGATTTAATTTTATTGGCCTTTTCAAGGTAATATATGTGGACTTCTCTTCTTGTCACTCCAATTTCGATGAATCTGTTCTCCTTGTAATCATACAAATCTGGTAGAAACTTCGGTTTTTCAGCTCCAGTAGTGTTGCAGATACTGTTTACTACTGTCCAGGCCATTGTTCTGTCTCTCCCCTCGATTATTTCAAATCTGTGCTTTAACAGTGCATTTGGATCATCAAGTTCTACCATTATTGATTCGCCTTGTTCATTGATGAAATGAAAATCTGAATACATGAAACATACCTCCAAGTGGGTGCATATTGCTGCAAATTTGTTTGTTTCAATTTTCAGATCCTCTCCATACTCTTTCATTGCTTTTTCTGCAAGTTCGACAATCATCGGGTTGAAGCGGAAACGCACTAGACCTCCATTCGAGACGGATTTCCA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-340\tXN:i:0\tXM:i:18\tXO:i:17\tXG:i:49\tNM:i:67\tMD:Z:0G0A1G10C10^C7A2T2^C18C2C0T0T475A0T0T0G0T5A1A12G1\tYT:Z:UU')
        self.assertEqual(alignment.qname(), 'gnl|ti|1086975905')
        self.assertEqual(alignment.flag(), 16)
        self.assertEqual(alignment.reference(), '8')
        self.assertEqual(alignment.pos(), 1626)
        self.assertEqual(alignment.cigar(), '8M1I3M1I6M2I2M1I1M1I5M1D2M3I7M5I4M1D4M9I6M5I3M5I1M4I499M2I2M2I3M4I1M2I7M')
        self.assertEqual(alignment.seq(), 'TTGACCTCTTGTGTGGTCAGGTTGTCCTTGTTTGGCATGGTCACGTTCAAAGCTGGGTATTAGAATTTTAAATGGGTCCCTCAGTAAACAGCTATGACCTCCTCGTCGAGAGTGTAGTCTGCCTTTGTGGCCATTTCCTCCCCAGTGAATGAGAAAATGTGAATGTGTGTGTTCTCAGATTTAATTTTATTGGCCTTTTCAAGGTAATATATGTGGACTTCTCTTCTTGTCACTCCAATTTCGATGAATCTGTTCTCCTTGTAATCATACAAATCTGGTAGAAACTTCGGTTTTTCAGCTCCAGTAGTGTTGCAGATACTGTTTACTACTGTCCAGGCCATTGTTCTGTCTCTCCCCTCGATTATTTCAAATCTGTGCTTTAACAGTGCATTTGGATCATCAAGTTCTACCATTATTGATTCGCCTTGTTCATTGATGAAATGAAAATCTGAATACATGAAACATACCTCCAAGTGGGTGCATATTGCTGCAAATTTGTTTGTTTCAATTTTCAGATCCTCTCCATACTCTTTCATTGCTTTTTCTGCAAGTTCGACAATCATCGGGTTGAAGCGGAAACGCACTAGACCTCCATTCGAGACGGATTTCCA')
        self.assertEqual(alignment.length(), 566)
        self.assertEqual(alignment.start(), 1626)
        self.assertEqual(alignment.end(), 1626 + 566 - 1)

    def test_alignment_parse_unaligned(self):
        alignment = sam.Alignment.parse('gnl|ti|1086975884\t4\t*\t0\t0\t*\t*\t0\t0\tGGCCCGGATCAGATTGAGATTTTGTGCGACAATGCTTCAACCCGATGATTGTCGAACTTGCAGAAAAAGCAATGAAAGAGTATGGAGAGGATCTGAAAATTGAAACAAACAAATTTGCAGCAATATGCACCCACTTGGAGGTATGTTTCATGTATTCAGATTTTCATTTCATCAATGAACAAGGCGAATCAATAATGGTAGAACTTGATGATCCAAATGCACTGTTAAAGCACAGATTTGAAATAATCGAGGGGAGAGACAGAACAATGGCCTGGACAGTAGTAAACAGTATCTGCAACACTACTGGAGCTGAAAAACCGAAGTTTCTACCAGATTTGTATGATTACAAGGAGAACAGATTCATCGAAATTGGAGTGACAAGAAGAGAAGTCCACATATATTACCTTGAAAAGGCCAATAAAATTAAATCTGAGAACACACACATTCACATTTTCTCATTCACTGGGGAGGAAATGGCCACAAAGGCAGACTACACTCTCGACGAGGAAAGCAGAGCTAGGATTAAAACCAGGCTGTTCACCATAAGGCAAGGTCATAGCTGTTTACTAACGATCCCTAAACGAAACTTATCAACGCGGAGACTGTTAAAAGTGCATAAATTTGGTATCACCTGTTGTCAAGGAAGCAAATAGTCCTATAATTGCCGAAGTTTCTCCTTA\ttYT:Z:UU')
        self.assertEqual(alignment.qname(), 'gnl|ti|1086975884')
        self.assertEqual(alignment.flag(), 4)
        self.assertEqual(alignment.reference(), '*')
        self.assertEqual(alignment.pos(), None)
        self.assertEqual(alignment.cigar(), '*')
        self.assertEqual(alignment.seq(), 'GGCCCGGATCAGATTGAGATTTTGTGCGACAATGCTTCAACCCGATGATTGTCGAACTTGCAGAAAAAGCAATGAAAGAGTATGGAGAGGATCTGAAAATTGAAACAAACAAATTTGCAGCAATATGCACCCACTTGGAGGTATGTTTCATGTATTCAGATTTTCATTTCATCAATGAACAAGGCGAATCAATAATGGTAGAACTTGATGATCCAAATGCACTGTTAAAGCACAGATTTGAAATAATCGAGGGGAGAGACAGAACAATGGCCTGGACAGTAGTAAACAGTATCTGCAACACTACTGGAGCTGAAAAACCGAAGTTTCTACCAGATTTGTATGATTACAAGGAGAACAGATTCATCGAAATTGGAGTGACAAGAAGAGAAGTCCACATATATTACCTTGAAAAGGCCAATAAAATTAAATCTGAGAACACACACATTCACATTTTCTCATTCACTGGGGAGGAAATGGCCACAAAGGCAGACTACACTCTCGACGAGGAAAGCAGAGCTAGGATTAAAACCAGGCTGTTCACCATAAGGCAAGGTCATAGCTGTTTACTAACGATCCCTAAACGAAACTTATCAACGCGGAGACTGTTAAAAGTGCATAAATTTGGTATCACCTGTTGTCAAGGAAGCAAATAGTCCTATAATTGCCGAAGTTTCTCCTTA')
        self.assertEqual(alignment.length(), 0)
        self.assertEqual(alignment.start(), None)
        self.assertEqual(alignment.end(), None)

    def test_samfile_coverage(self):
        samfile = sam.SamFile.read('../../../../../../tutorial/read_coverage/influenza-A.sam')
        alns = [aln.qname() for aln in samfile.coverage('1', 1, 100)]
        self.assertEquals(4, len(alns))
        alns = sorted(alns)
        expected_alns = ['gnl|ti|1086975778', 'gnl|ti|1086975821', 'gnl|ti|1086975838', 'gnl|ti|1086975916']
        self.assertItemsEqual(expected_alns, alns)

    def test_samfile_general_usage(self):
        # Parse a file into a SamFile instance
        samfile = sam.SamFile.read('../../../../../../tutorial/read_coverage/influenza-A.sam')

        # In the background, the SamFile class partitions the alignments in the file
        # by reference sequence, and organizes them in an IntervalTree, used for quick
        # retrieval of overlaps.

        # Compute the coverage of reference sequence '1' within the interval 1-100, and
        # get all reads overlapping with it.
        alns = samfile.coverage('1', 1, 1000)

        print 'Found {0} alignments overlapping with reference sequence 1 in the range [1, 100]. Here they are:'.format(len(alns))

        print 'Ref\tStart\tEnd\tQName'
        for aln in alns:
            print '{0}\t{1}\t{2}\t{3}'.format(aln.reference(), aln.start(), aln.end(), aln.qname())

        print '\nBase pair coverage for this range is:'
        cov = samfile.base_pair_coverage('1', 1, 1000)
        print cov

if __name__ == '__main__':
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
